1.every row have one queen
2.ever column have one queen
3-no queen can attack each otheer
4.use  hash for valid place--- left row,upper diagonal[n-1+col-row],low diagonal[row+column].



class Solution {
public:
    
    void solve(int col,vector<vector<string>> &ans,vector<string> &board,int n,vector<int> &leftrow,vector<int> &updiag,vector<int> &lowdiag)
    {
        if(col==n)
        {
            ans.push_back(board);//base condition when all place  get filled
            return ;
        }
        for (int row=0;row<n;row++)// for every row
        {
            if(leftrow[row]==0 && updiag[n-1+col-row]==0 && lowdiag[col+row]==0)// check if there is any other queen only 3 direction
            {
                board[row][col]='Q';
                leftrow[row]=1;
                updiag[n-1+col-row]=1;// update place
                lowdiag[col+row]=1;
                solve(col+1,ans,board,n,leftrow,updiag,lowdiag);// call for other column 
                board[row][col]='.';
                leftrow[row]=0;
                updiag[n-1+col-row]=0;// backtrack
                lowdiag[col+row]=0;
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');// create string of length n
        for(int i=0;i<n;i++)
        {
            board[i]=s;//append in board
        }
        vector<int> leftrow(n,0),updiag(2*n-1,0),lowdiag(2*n-1,0);// hash map of length 2n-1
        solve(0,ans,board,n,leftrow,updiag,lowdiag);
        return ans;
        
    }
};
